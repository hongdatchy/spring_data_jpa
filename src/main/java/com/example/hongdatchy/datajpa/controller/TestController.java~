package com.example.hongdatchy.datajpa.controller;

import com.example.hongdatchy.datajpa.model.entities.*;
import com.example.hongdatchy.datajpa.repo.*;
import com.example.hongdatchy.datajpa.service.BangAService;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@AllArgsConstructor
@RestController
public class TestController {

    BangAService bangAService;

    BangARepository bangARepository;

    ConARepository conARepository;

    BangBRepository bangBRepository;

    BangtrunggianRepository bangtrunggianRepository;

    ChauARepository chauARepository;

    @GetMapping("api/bangA")
    public ResponseEntity<Object> findAllA() {
        return ResponseEntity.ok(bangAService.findAllUsingEntityManager());
    }

    @GetMapping("api/bangA/{id}")
    public ResponseEntity<Object> findAllA(@PathVariable int id) {
        return ResponseEntity.ok(bangARepository.findById(id));
    }

//    @GetMapping("api/bangAJson")
//    public ResponseEntity<Object> findAllAJson() {
//        return ResponseEntity.ok(bangAService.findAllJson());
//    }

    @GetMapping("api/bangB")
    public ResponseEntity<Object> findAllB() {
        return ResponseEntity.ok(bangBRepository.findAll());
    }

    @GetMapping("api/bangtrunggian")
    public ResponseEntity<Object> findAllBangTrungGian() {
        return ResponseEntity.ok(bangtrunggianRepository.findAll());
    }

    @GetMapping("api/conA")
    public ResponseEntity<Object> findAllConA() {
        return ResponseEntity.ok(conARepository.findAll());
    }

    @GetMapping("api/chauA")
    public ResponseEntity<Object> findAllChauA() {
        return ResponseEntity.ok(chauARepository.findAll());
    }

    @GetMapping("api/bangA/findByNameContains")
    public ResponseEntity<Object> findByNameContains(@RequestParam String str) {
        return ResponseEntity.ok(bangAService.findNameContains(str));
    }

    @DeleteMapping("api/bangA/{id}")
    public ResponseEntity<Object> delete(@PathVariable int id) {
        bangARepository.deleteById(id);
        return ResponseEntity.ok("");
    }

    @PostMapping("api/bangA")
    public ResponseEntity<Object> create(@RequestBody BangA bangA) {
        return ResponseEntity.ok(bangARepository.save(bangA));
    }

    @PutMapping("api/bangA")
    public ResponseEntity<Object> update(@RequestBody BangA bangA) {
        return ResponseEntity.ok(bangARepository.save(bangA));
    }

    @PostMapping("api/bangB")
    public ResponseEntity<Object> createB(@RequestBody BangB bangB) {
        return ResponseEntity.ok(bangBRepository.save(bangB));
    }

    @PutMapping("api/bangB")
    public ResponseEntity<Object> updateB(@RequestBody BangB bangB) {
        return ResponseEntity.ok(bangBRepository.save(bangB));
    }

    @PostMapping("api/bangtrunggian")
    public ResponseEntity<Object> createBangTrungGian(@RequestBody Bangtrunggian bangtrunggian) {
        return ResponseEntity.ok(bangtrunggianRepository.save(bangtrunggian));
    }

    @PutMapping("api/bangtrunggian")
    public ResponseEntity<Object> updateBangTrungGian(@RequestBody Bangtrunggian bangtrunggian) {
        return ResponseEntity.ok(bangtrunggianRepository.save(bangtrunggian));
    }

    @PostMapping("api/chauA")
    public ResponseEntity<Object> createChauA(@RequestBody ChauA chauA) {
        return ResponseEntity.ok(chauARepository.save(chauA));
    }

    @PutMapping("api/chauA")
    public ResponseEntity<Object> updateChauA(@RequestBody ChauA chauA) {
        return ResponseEntity.ok(chauARepository.save(chauA));
    }

    @PostMapping("api/conA")
    public ResponseEntity<Object> createConA(@RequestBody ConA conA) {
        return ResponseEntity.ok(conARepository.save(conA));
    }

    @PutMapping("api/conA")
    public ResponseEntity<Object> updateConA(@RequestBody ConA conA) {
        return ResponseEntity.ok(conARepository.save(conA));
    }

    /**
     * copy v√†o powerShell:
     * 1..10 | ForEach-Object {
     *     $i = $_
     *     Start-Job {
     *         $response = Invoke-RestMethod -Uri "http://localhost:8081/api/bangA/cash/1/10"
     *         Write-Output "Thread $using:i: $response"
     *     }
     * }
     * Get-Job | Wait-Job | Receive-Job
     */
    @GetMapping("api/bangA/cash/{id}/{amount}")
    public ResponseEntity<Object> cash(@PathVariable int id,
                                       @PathVariable int amount) {
        return ResponseEntity.ok(bangAService.cash(id, amount));
    }

}
